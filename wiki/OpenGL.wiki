#summary OpenGL design notes

= About OpenGL =

OpenGL on the Android platform is a restricted subset that is sufficient for
making some interesting smartphone apps.

I found [http://blog.jayway.com/2009/12/03/opengl-es-tutorial-for-android-part-i/ this tutorial] pretty useful, as a re-introduction to OpenGL. And also the [http://www.khronos.org/opengles/sdk/1.1/docs/man/ OpenGL ES reference page for C++].

= 3D Compass design =

I wanted a free-spinning compass needle, resembling the red-white parallelogram seen in the application icon. The 3D form was obvious: two cones generated by the rotation of the parallelogram.

http://android-compass3d.googlecode.com/svn/trunk/compass3d/res/drawable-hdpi/icon.png

A cone was pretty simply modeled as the tip vertex, and some number of verticies for the circular (regular polygonal) base.

Modelling the entire needle would mean specifying vertex colours, and the colour of the 'base' vertices would have to be both red and white simultaneously. Therefore, the needle is actually two copies of the one hollow cone.

The normals of the vertices turned out to be exactly their own positions (which was handy).

= Transforming a magnetometer vector into 3D rotations =

This was the trickiest part. And I got it mostly right early except for that I had the two rotation transformations swapped around.

I took the 3-space vector and determined the yaw and pitch. The yaw was simply the projection into the z plane and taking an angle with arctan. The pitch was harder: it had to be constrained to (-90&deg;,+90&deg;] and wasn't simply a simple property of the projection into the x or y plane. Instead, I realized I had to find the angle to its projection into the z plane.

Using a reference (up) vector of (0,1,0), and implementing a 'fake' compass source that provided a well-known rotating field, I could test my equations quickly.

= Buffers =

I'm not sure why I did this for such a simple model, but I am learning: I spent some effort in creating FloatBuffers for the vertices instead of lots of 'immediate' operations on the OpenGL object.

= Lighting =

This was the aspect of OpenGL that I found myself guessing most of the time.

I wanted a slightly shiny needle that was "lit from above" as per the Android UI guidelines. I found that there is only one light in the Android OpenGL (sufficient!) and after some false starts, eventually got it right.